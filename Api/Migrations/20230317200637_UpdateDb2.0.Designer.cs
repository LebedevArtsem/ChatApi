// <auto-generated />
using System;
using Api;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Api.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20230317200637_UpdateDb2.0")]
    partial class UpdateDb20
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseSerialColumns(modelBuilder);

            modelBuilder.Entity("Api.Models.ChatMessage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<bool>("IsRead")
                        .HasColumnType("boolean")
                        .HasColumnName("isread");

                    b.Property<string>("Message")
                        .HasColumnType("text")
                        .HasColumnName("message");

                    b.Property<int>("RecievedUser")
                        .HasColumnType("integer")
                        .HasColumnName("recieved_person");

                    b.Property<int>("SendedUser")
                        .HasColumnType("integer")
                        .HasColumnName("sended_person");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("datetime");

                    b.HasKey("Id");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("Api.Models.Friend", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<int?>("friend_email")
                        .HasColumnType("integer");

                    b.Property<int?>("user_email")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("friend_email");

                    b.HasIndex("user_email");

                    b.ToTable("friends");
                });

            modelBuilder.Entity("Api.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseSerialColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Password")
                        .HasColumnType("text")
                        .HasColumnName("password");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("text")
                        .HasColumnName("refresh_token");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("refresh_token_expiry_time");

                    b.HasKey("Id");

                    b.HasAlternateKey("Email")
                        .HasName("email");

                    b.ToTable("users");
                });

            modelBuilder.Entity("Api.Models.Friend", b =>
                {
                    b.HasOne("Api.Models.User", "FriendEmail")
                        .WithMany()
                        .HasForeignKey("friend_email");

                    b.HasOne("Api.Models.User", "UserEmail")
                        .WithMany()
                        .HasForeignKey("user_email");

                    b.Navigation("FriendEmail");

                    b.Navigation("UserEmail");
                });
#pragma warning restore 612, 618
        }
    }
}
